#!/usr/bin/env node

import path from 'node:path';
import fs from 'node:fs';
import { parseBrainfuck, brainfuckIRToJVM } from './index.js';
import { ClassFileGenerator } from './class_generator.js';

// --- Get file from argv ---
if (process.argv.length < 3) {
  console.error('Usage: node brainjuck.js <brainfuck-file> [class name]');
  process.exit(1);
}

const filePath = path.resolve(process.argv[2]);

// --- Read Brainfuck source ---
let source;
try {
  source = fs.readFileSync(filePath, 'utf8');
} catch (err) {
  console.error(`Error reading file: ${filePath}`);
  console.error(err.message);
  process.exit(1);
}

// --- Parse to IR ---
let ir;
try {
  ir = parseBrainfuck(source);
} catch (err) {
  console.error('Error parsing Brainfuck code:');
  console.error(err.message);
  process.exit(1);
}

const className = process.argv[3] ?? 'CompiledBrainfuck';
const generator = new ClassFileGenerator();
const helloWorldClass = generator.generateHelloWorldClass(className, ({
  symbolicConstantPool
}) => {
  return brainfuckIRToJVM(ir, {
    input: {
      fieldRefIndex: symbolicConstantPool.input.fieldRef,
      methodRefIndex: symbolicConstantPool.input.readMethodrefIndex
    },
    output: {
      fieldRefIndex: symbolicConstantPool.output.fieldRef,
      methodRefIndex: symbolicConstantPool.output.printlnMethodrefIndex
    }
  })
});
console.log(`${className}.class generated:`, helloWorldClass.length, 'bytes');

ClassFileGenerator.saveToFile(`${className}.class`, helloWorldClass);
